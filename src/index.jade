doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Full-Stack Through Microservices

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Full-Stack Through Microservices
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>

      section(data-camera="fullscreen")
        p Camera not working

      section
        h2.bullet Where do we come from?
        h3.bullet a brief history of distributing services

      section(data-bespoke-state='letters')
        .letter-box
          .bullet

          .row
            span.red R
            span.bullet emote

          .row
            span.red P
            span.bullet rocedure

          .row
            span.red C
            span.bullet all

      section
        img(src='images/sun.png')

        br

        h2 SUN's RPC, basis of NFS

      section
          img(src='images/java.png', style='height: 100%')

          br

          h2 RMI

      section
        img(src='images/dnode.png' style="width: 100%")

      section
        h2 Dnode

        pre
          code.language-javascript.
            var dnode = require('dnode');
            var server = dnode({
                replace: function (s, cb) {
                    cb(s.replace(/[aeiou]{2,}/, 'oo').toUpperCase())
                }
            });
            server.listen(5004);

      section
        h2 Takeaways
        ul
          li request/response pattern
          li built on streams
          li JSON message format
          li works from the browser, too!
          li data must be ready before calling the RPC
          li no live feed, 'no realtime'

      section(data-bespoke-state='letters')
        .letter-box(style="font-size: 42")
          .row
            .red R
          .row
            .red E
          .row
            .red S
          .row
            .red T

      section
        h2 Takeaways
        ul
          li Most of the time not used under Roy's guidelines
          li A much nicer version of RPC?
          li No live feed (Server-Sent Events?)
          li Is WebSocket REST?

      section
        img(src='images/docker.png', style='width: 100%')

      section
        quote
          i.fa.fa-2x.fa-quote-left
          .text
            | instead of pretending everything is a local function even over the network (which turned out to be a bad idea), what if we did it the other way around? Pretend your components are communicating over a network even when they aren't.
          a(href='https://twitter.com/solomonstre') Solomon Hykes - @solomonstre

      section
        h2 LibChan
        ul.bullet
          li Built in Go
          li
            em future
            | basis of Docker
          li SPDY all the things!
          li Like Go Channels over the Network
          li MsgPack all the things!
          li unidirectional
          li automatic binary stream support

      section
        h2 jsChan
        ul.bullet
          li node.js and browser* support
          li a Channel is a Transform
          li you manipulate channels via through
          li each MicroService is just a through away
          li SPDY, or Websocket

      section
        h2 Unidirectionality

        ul.bullet
          li means that you send a request
          li and you cannot have a response
          li ... really??
          li you can send a return Channel
          li or 42.

      section
        pre
          code.language-javascript.
            var session = jschan.spdyClientSession({ port: 9323 })
            var sender = session.WriteChannel()
            var cmd = {
              Args: process.argv.slice(3),
              Cmd: process.argv[2],
              StatusChan: sender.ReadChannel(),
              Stderr: process.stderr,
              Stdout: process.stdout,
              Stdin: process.stdin
            }
            sender.write(cmd)

      section
        // add here a jsChan server

      sectio
        h2 What can we send on a Channel?
        // Todo fill

      section
        h1 Demo App!
        h3 I'm into the Internet of Things

      section
        h2 Temperature Sensor
        p
          | Object: &nbsp;
          span#ir-object.sensor-data
          | &nbsp; °C
        p
          | Ambient: &nbsp;
          span#ir-ambient.sensor-data
          | &nbsp; °C

      section
        h2 A humidity sensor!
        p
          i.fa.fa-umbrella.fa-5x
          | &nbsp;
          span#humidity.sensor-data
          | &nbsp; %RH

      section(data-camera="fullscreen")
        p Camera not working

      section
        h2 Request/Reponse
        pre
          code(data-bespoke-autorun).language-javascript.
            var ret = graft.ReadChannel()

            graft.write({
              cmd: 'getLastTemp',
              ret: ret
            })

            ret.on('data', function(data) {
              alert(data)
            })

      section
        h2 Channels support Backpressure

        img(src='images/backpressure.png')

        .copyright
          | Image courtesy of&nbsp;
          a(href="http://twitter.com/jlord")
            | @jlord
          | &nbsp;and&nbsp;
          a(href="http://twitter.com/maxogden")
            | @maxogden

      section
        h2 A simple adder service

      section
        h2 Calling it locally

      section
        h2 Remote Orchestration

      section
        h2 Todo List
        ul.bullet
          li lots of testing
          li service discovery?
          li more transport
          li examples for authentication
          li HTTP/REST support

      section
        h2 Graft and jsChan Team
        ul.bullet
          li Adrian Roussow
          li Peter Elger
          li Matteo Collina

      section
        .container
          img(src='images/me.png', style='width: 100%')

      section
        h1 Thanks!
        br
        h3 <a href="mailto:hello@matteocollina.com">hello@matteocollina.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a> on Twitter
        h3 <a href="http://github.com/mcollina">@mcollina</a> on Github
        h3 <a href="http://www.matteocollina.com">www.matteocollina.com</a>

    script(src='build/build.js')
